数值型特征：连续型和离散型
文本型特征
它们的处理要求是：
	数值型特征一般可以直接用于模型的训练，
	但有时候为了模型的稳定性及鲁棒性会对连续变量进行离散化。
	文本型特征往往需要转换成数值型特征才能用于建模分析。

#1 连续型数值特征的分箱/离散化处理
df['AgeBand'] = pd.cut(df['Age'], 5,labels = [1,2,3,4,5])   平均划分
df['AgeBand'] = pd.cut(df['Age'],[0,5,15,30,50,80],labels = [1,2,3,4,5])  指定区间划分
df['AgeBand'] = pd.qcut(df['Age'],[0,0.1,0.3,0.5,0.7,0.9],labels = [1,2,3,4,5])  分位数划分 

#2文本分类特征的处理
#2-1 统计
df['Sex'].value_counts()  文本特征统计，输出种类及其数据
df['Sex'].unique()           文本特征的集合

#2-2 转换
#2-2-1 整数编码：replace函数，map函数，甚至apply函数
df['Sex_num'] = df['Sex'].replace(['male','female'],[1,2])   这应该是series列的replace函数
df['Sex_num'] = df['Sex'].map({'male': 1, 'female': 2})      
#2-2-2 独热编码： get_dummies函数
df=pd.DataFrame([np.array([1,2,3,4,5]),list('ABCBA')]).T
#    0  1  实施对1列的独热编码
# 0  1  A
# 1  2  B
# 2  3  C
# 3  4  B
# 4  5  A
x = pd.get_dummies(df[1], prefix=1)  #prefix是前缀的意思，对df[1]列进行独热编码
#    1_A  1_B  1_C
# 0    1    0    0
# 1    0    1    0
# 2    0    0    1
# 3    0    1    0
# 4    1    0    0
df = pd.concat([df, x], axis=1) #然后拼接即可
#    0  1  1_A  1_B  1_C
# 0  1  A    1    0    0
# 1  2  B    0    1    0
# 2  3  C    0    0    1
# 3  4  B    0    1    0
# 4  5  A    1    0    0



